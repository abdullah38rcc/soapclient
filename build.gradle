apply plugin: "java"
apply plugin: "eclipse"
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: "sonar-runner"

archivesBaseName = 'soapclient'
group = 'de.epages'
description = 'AXIS 1.x based SOAP client for epages6'
version = '6.17.0-SNAPSHOT'

repositories { mavenCentral() }
configurations { axisGenTask }

// add src/gen/java
sourceSets.main.java.srcDirs 'src/gen/java'
sourceSets.main.java.srcDirs 'src/main2/java'
sourceSets.main.java.srcDirs 'src/gen2/java'
sourceSets.test.java.srcDirs 'src/test2/java'

ext {
    axisVersion = "1.4"
    slf4jVersion = "1.7.5"
    junitVersion = "4.11"
    wsdl4jVersion = "1.6.3"
    commonsDiscoveryVersion = "0.5"
    logbackVersion = "1.0.13"
}

dependencies {
    compile "org.apache.axis:axis:${axisVersion}"
    compile "org.apache.axis:axis-jaxrpc:${axisVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"

    runtime "org.apache.axis:axis-saaj:${axisVersion}"
    runtime "commons-discovery:commons-discovery:${commonsDiscoveryVersion}"
    runtime "wsdl4j:wsdl4j:${wsdl4jVersion}"

    testCompile "junit:junit:${junitVersion}"

    testRuntime "org.slf4j:jul-to-slf4j:${slf4jVersion}"
    testRuntime "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    testRuntime "ch.qos.logback:logback-core:${logbackVersion}"

    axisGenTask "org.apache.axis:axis-ant:${axisVersion}"
    axisGenTask "org.apache.axis:axis:${axisVersion}"
    axisGenTask "org.apache.axis:axis-jaxrpc:${axisVersion}"
    axisGenTask "wsdl4j:wsdl4j:${wsdl4jVersion}"
    axisGenTask "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    axisGenTask "ch.qos.logback:logback-core:${logbackVersion}"
    axisGenTask "commons-discovery:commons-discovery:${commonsDiscoveryVersion}"
}

project.sourceCompatibility = rootProject.hasProperty("SOURCE_COMPATIBILITY") ?: "1.7"

compileJava {
    options.with {
        compilerArgs << "-Xlint:unchecked"
        options.encoding = 'UTF-8'
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

sonarRunner {
    sonarProperties {
        def env = System.getenv()
        if (env.get("SONAR_URL") != null) {
           property "sonar.host.url", env.get("SONAR_URL")
        } else {
            property "sonar.host.url", 'http://localhost:9000/'
        }

        if (env.get("SONAR_JDBC_URL") != null) {
            property "sonar.jdbc.url", env.get("SONAR_JDBC_URL")
        } else {
            property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true"
        }
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonar"
        property "sonar.jdbc.password", "sonar"

        property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
        property "sonar.jacoco.itReportPath", "build/jacoco/integrationTest.exec"
        property "sonar.scm.url", "scm:git:https://github.com/ePages-de/soapclient/"

        if (env.get("GIT_BRANCH") != null) {
            // fix for new "feature" http://jira.codehaus.org/browse/SONAR-4188
            property "sonar.branch", env.get("GIT_BRANCH").replace('/', '_')
        }
        properties["sonar.sources"] = sourceSets.main.allSource.srcDirs
        .grep({ it.exists()})
        .collect { project.relativePath(it) }
        .join(',')
        properties["sonar.binaries"] = sourceSets.main.runtimeClasspath.files.join(',')
        properties["sonar.jacoco.reportPath"] = "build/jacoco/test.exec"
        properties["sonar.jacoco.itReportPath"] = "build/jacoco/integrationTest.exec"
   }
}

task axisGen() {
    outputs.dir file('src/gen2/java')
    ant.echo(message: 'Generating Classes from WSDL')
    ant.taskdef(
        name: 'codegen',
        classname: 'org.apache.axis.tools.ant.wsdl.Wsdl2javaAntTask',
        classpath: configurations.axisGenTask.asPath,
    )

    doLast {
        file('src/gen2/java').mkdirs()
        ['BasketService', 'ProductService11'].each 
        { def wsdlName ->
            ant.codegen(
                url: "../wsdl/${wsdlName}.wsdl",
                output: 'src/gen2/java',
                verbose: true,
                helpergen: false,
            )
        }
    }
}

artifacts {
    archives sourceJar
}

wrapper {  gradleVersion = "1.8" }
